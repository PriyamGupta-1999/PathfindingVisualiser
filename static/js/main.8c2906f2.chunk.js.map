{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","header.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","i","setTimeout","animateShortestPath","document","getElementById","animateShortestPath_reset","grid1","animateDijkstra","Button","variant","onClick","visualizeDijkstra","reset","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","Header","Navbar","bg","Container","Brand","href","Nav","Link","Footer","Card","Body","title","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c2906f2.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\n\n//each cell of the grid \nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport Button from 'react-bootstrap/Button';\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    //this also starts for clicking the mouse \n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    //To drag the bol \n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    // this will kill the grid \n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      //to animagter the shortest path \n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (i == nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path end-node';\n        }, 50 * i);\n        continue;\n      }\n\n      if (i == 0) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path first-node';\n        }, 50 * i);\n        continue;\n      }\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n\n  reset() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      //to animagter the shortest path \n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath_reset(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node';\n      }, 10 * i);\n    }\n    const grid1 = getInitialGrid()\n    this.setState({ grid: grid1 });\n\n  }\n\n  animateShortestPath_reset(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (i == nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node end-node';\n        }, 50 * i);\n        continue;\n      }\n\n      if (i == 0) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node first-node';\n        }, 50 * i);\n        continue;\n      }\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node';\n      }, 50 * i);\n    }\n  }\n\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n\n        <div id=\"taskbar\">\n          <Button variant=\"success\">\n            start node\n          </Button>\n          <Button variant=\"danger\">\n            end node\n          </Button>\n\n          <Button variant=\"secondary\" onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n          </Button>\n\n          <Button variant=\"secondary\" onClick={() => this.reset()}>\n            reset\n          </Button>\n        </div>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall, // IF FALSE THEN IT BECOMES TRUE\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nconst Header = () => {\n    return (\n        <div>\n\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"#home\">Path Finding Visualiser</Navbar.Brand>\n                    <Nav className=\"me-auto\">\n                        <Nav.Link href=\"#home\">Visualise Dijkstra Now!</Nav.Link>\n\n                    </Nav>\n                </Container>\n            </Navbar>\n            <br />\n\n\n        </div>\n\n\n\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nimport Card from 'react-bootstrap/Card';\nconst Footer = () => {\n    return (\n        <div>\n            <Card>\n                <Card.Header>Dijkstra algorithm</Card.Header>\n                <Card.Body>\n                    <blockquote className=\"blockquote mb-0\">\n                        <p>\n                            {' '}\n                            Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.{' '}\n                        </p>\n                        <footer className=\"blockquote-footer\">\n                            <cite title=\"Source Title\">edsger w. dijkstra</cite>\n                        </footer>\n                    </blockquote>\n                </Card.Body>\n            </Card>\n\n\n\n        </div>\n\n\n\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\nimport Header from './header';\nimport Footer from './footer';\n\n\n\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n\n      <Header />\n      <PathfindingVisualizer></PathfindingVisualizer>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}